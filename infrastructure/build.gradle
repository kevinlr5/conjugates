apply from: 'util.gradle'

apply plugin: 'org.flywaydb.flyway'

import org.flywaydb.gradle.task.FlywayCleanTask;
import org.flywaydb.gradle.task.FlywayMigrateTask;
import org.flywaydb.gradle.FlywayExtension;

ext {
    terraformStateBucketName = System.getenv("TERRAFORM_STATE_BUCKET_NAME")
    awsAccessKeyRoot = System.getenv("AWS_ACCESS_KEY_ROOT")
    awsSecretKeyRoot = System.getenv("AWS_SECRET_KEY_ROOT")
    awsAccessKeyDeployment = System.getenv("AWS_ACCESS_KEY_DEPLOYMENT")
    awsSecretKeyDeployment = System.getenv("AWS_SECRET_KEY_DEPLOYMENT")
    awsCertArn = System.getenv("AWS_CERT_ARN")
    domain = System.getenv("DOMAIN")
    dbUserPassword = System.getenv("DB_USER_PASSWORD")
    dbHostname = System.getenv("DB_HOSTNAME")
    dbUsername = 'maindbuser'
    terraformAccountBuildDir = "${project.buildDir}/terraform/account"
    terraformDeploymentBuildDir = "${project.buildDir}/terraform/deployment"
    deployType = project.hasProperty('deployType') ? project.getProperty('deployType') : 'test'
    deployId = project.hasProperty('deployId') ? project.getProperty('deployId') : createDeployId(deployType)
    schemaName = deployType == 'test' ? "analyzer-${deployId}" : "analyzer-${deployType}"
}

def createFlywayExtension() {
    def extension = new org.flywaydb.gradle.FlywayExtension()
    extension.user = dbUsername
    extension.url = "jdbc:mysql://${dbHostname}:3306"
    extension.password = dbUserPassword
    extension.locations = ["filesystem:${projectDir}/main_schema"]
    extension.schemas = [schemaName]
    return extension
}

def downloadAccountState() {
    downloadS3Object(
        awsAccessKeyDeployment,
        awsSecretKeyDeployment,
        terraformStateBucketName,
        'account/terraform.tfstate',
        file("${terraformAccountBuildDir}/terraform.tfstate")
    )
}

task clean(type: Delete) {
    delete 'build'
}

task flywayMigrateTest(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    extension = createFlywayExtension()
}

task flywayCleanTest(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    extension = createFlywayExtension()
}

task copyAwsAccountFiles(type: Copy) {
    from("${projectDir}/aws_account_setup")
    into(terraformAccountBuildDir)
}

task copyDeploymentFiles(type: Copy) {
    from("${projectDir}/deployment")
    into(terraformDeploymentBuildDir)
}

task downloadAccountState() {
    doLast {
        downloadAccountState()
    }
}

task createAwsAccount() {
    dependsOn 'copyAwsAccountFiles'
    doLast {
        def s3Key = 'account/terraform.tfstate'
        if(doesS3ObjectExist(
            awsAccessKeyRoot,
            awsSecretKeyRoot,
            terraformStateBucketName,
            s3Key
        )) {
            downloadAccountState()
            createAccount(
                awsAccessKeyRoot,
                awsSecretKeyRoot,
                terraformStateBucketName,
                s3Key,
                terraformAccountBuildDir,
                dbUsername,
                dbUserPassword
            )
        } else { 
            def newBucketName = createTerraformStateBucketName()
            createAccount(
                awsAccessKeyRoot,
                awsSecretKeyRoot,
                newBucketName,
                s3Key,
                terraformAccountBuildDir,
                dbUsername,
                dbUserPassword
            )
        }
    }
}

task destroyAwsAccount() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles'
    doLast {
        def terraformAccountSetupEnvironment = [
            'TF_VAR_aws_access_key_root': awsAccessKeyRoot,
            'TF_VAR_aws_secret_key_root': awsSecretKeyRoot,
            'TF_VAR_terraform_bucket_name': terraformStateBucketName,
            'TF_VAR_db_user' : dbUsername,
            'TF_VAR_db_user_password' : dbUserPassword
        ]
        emptyS3Bucket(
            awsAccessKeyRoot,
            awsSecretKeyRoot,
            terraformStateBucketName
        )
        runTerraform(
            terraformAccountBuildDir,
            ['destroy', '-force'],
            terraformAccountSetupEnvironment
        )
    }
}

task flywayMigrateTestDeploy(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    extension = createFlywayExtension()
}

task flywayCleanTestDeploy(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    extension = createFlywayExtension()
}

task deployTest() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles', 'copyDeploymentFiles', 'flywayMigrateTestDeploy'
    doLast {
        deploy(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            awsCertArn,
            deployId,
            deployType,
            terraformStateBucketName,
            terraformDeploymentBuildDir,
            terraformAccountBuildDir
        )
    }
}

task destroyDeploy() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles', 'copyDeploymentFiles', 'flywayCleanTestDeploy'
    doLast {
        def deployType = 'not_used'
        destroyDeploy(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            awsCertArn,
            deployId,
            deployType,
            terraformStateBucketName,
            terraformDeploymentBuildDir,
            terraformAccountBuildDir
        )
    }
}

task testDeploy() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles', 'copyDeploymentFiles', 'flywayMigrateTestDeploy'
    finalizedBy 'flywayCleanTestDeploy'
    doLast {
        try {
            deploy(
                awsAccessKeyDeployment,
                awsSecretKeyDeployment,
                awsCertArn,
                deployId,
                deployType,
                terraformStateBucketName,
                terraformDeploymentBuildDir,
                terraformAccountBuildDir
            )
        } finally {
            destroyDeploy(
                awsAccessKeyDeployment,
                awsSecretKeyDeployment,
                awsCertArn,
                deployId,
                deployType,
                terraformStateBucketName,
                terraformDeploymentBuildDir,
                terraformAccountBuildDir
            )
        }
    }
}

task flywayMigrateCore(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    extension = createFlywayExtension()
}

task deployCore() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles', 'copyDeploymentFiles', 'flywayMigrateCore'
    doLast {
        deployCore(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            awsCertArn,
            deployType,
            terraformStateBucketName,
            terraformDeploymentBuildDir,
            terraformAccountBuildDir,
            domain
        )
    }
}