apply from: 'util.gradle'

ext {
    terraformStateBucketName = System.getenv("TERRAFORM_STATE_BUCKET_NAME")
    awsAccessKeyRoot = System.getenv("AWS_ACCESS_KEY_ROOT")
    awsSecretKeyRoot = System.getenv("AWS_SECRET_KEY_ROOT")
    awsAccessKeyDeployment = System.getenv("AWS_ACCESS_KEY_DEPLOYMENT")
    awsSecretKeyDeployment = System.getenv("AWS_SECRET_KEY_DEPLOYMENT")
    awsCertArn = System.getenv("AWS_CERT_ARN")
    domain = System.getenv("DOMAIN")
    terraformAccountBuildDir = "${project.buildDir}/terraform/account"
    terraformDeploymentBuildDir = "${project.buildDir}/terraform/deployment"
}

task clean(type: Delete) {
    delete 'build'
}

task copyAwsAccountFiles(type: Copy) {
    from("${projectDir}/aws_account_setup")
    into(terraformAccountBuildDir)
}

task copyDeploymentFiles(type: Copy) {
    from("${projectDir}/deployment")
    into(terraformDeploymentBuildDir)
}

task createAwsAccount() {
    dependsOn 'copyAwsAccountFiles'
    doLast {
        def s3Key = 'account/terraform.tfstate'
        if(doesS3ObjectExist(
            awsAccessKeyRoot,
            awsSecretKeyRoot,
            terraformStateBucketName,
            s3Key
        )) {
            downloadS3Object(
                awsAccessKeyRoot,
                awsSecretKeyRoot,
                terraformStateBucketName,
                'account/terraform.tfstate',
                file("${terraformAccountBuildDir}/terraform.tfstate")
            )
            createAccount(
                awsAccessKeyRoot,
                awsSecretKeyRoot,
                terraformStateBucketName,
                s3Key,
                terraformAccountBuildDir
            )
        } else { 
            def newBucketName = createTerraformStateBucketName()
            createAccount(
                awsAccessKeyRoot,
                awsSecretKeyRoot,
                newBucketName,
                s3Key,
                terraformAccountBuildDir
            )
        }
    }
}

task destroyAwsAccount() {
    dependsOn 'copyAwsAccountFiles'
    doLast {
        def terraformAccountSetupEnvironment = [
            'TF_VAR_aws_access_key_root': awsAccessKeyRoot,
            'TF_VAR_aws_secret_key_root': awsSecretKeyRoot,
            'TF_VAR_terraform_bucket_name': terraformStateBucketName
        ]
        downloadS3Object(
            awsAccessKeyRoot,
            awsSecretKeyRoot,
            terraformStateBucketName,
            'account/terraform.tfstate',
            file("${terraformAccountBuildDir}/terraform.tfstate")
        )
        emptyS3Bucket(
            awsAccessKeyRoot,
            awsSecretKeyRoot,
            terraformStateBucketName
        )
        runTerraform(
            terraformAccountBuildDir,
            ['destroy', '-force'],
            terraformAccountSetupEnvironment
        )
    }
}

task deployTest() {
    dependsOn 'copyAwsAccountFiles', 'copyDeploymentFiles'
    doLast {
        downloadS3Object(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            terraformStateBucketName,
            'account/terraform.tfstate',
            file("${terraformAccountBuildDir}/terraform.tfstate")
        )
        def deployType = 'test'
        def deployId = createDeployId(deployType)
        deploy(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            awsCertArn,
            deployId,
            deployType,
            terraformStateBucketName,
            terraformDeploymentBuildDir,
            getVpcId(terraformAccountBuildDir)
        )
    }
}

task destroyDeploy() {
    dependsOn 'copyAwsAccountFiles', 'copyDeploymentFiles'
    doLast {
        downloadS3Object(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            terraformStateBucketName,
            'account/terraform.tfstate',
            file("${terraformAccountBuildDir}/terraform.tfstate")
        )
        def deployType = 'not_used'
        destroyDeploy(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            awsCertArn,
            deployId,
            deployType,
            terraformStateBucketName,
            terraformDeploymentBuildDir,
            getVpcId(terraformAccountBuildDir)
        )
    }
}

task testDeploy() {
    dependsOn 'copyAwsAccountFiles', 'copyDeploymentFiles'
    doLast {
        downloadS3Object(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            terraformStateBucketName,
            'account/terraform.tfstate',
            file("${terraformAccountBuildDir}/terraform.tfstate")
        )
        def deployType = 'test'
        def deployId = createDeployId(deployType)
        try {
            deploy(
                awsAccessKeyDeployment,
                awsSecretKeyDeployment,
                awsCertArn,
                deployId,
                deployType,
                terraformStateBucketName,
                terraformDeploymentBuildDir,
                getVpcId(terraformAccountBuildDir)
            )
        } finally {
            destroyDeploy(
                awsAccessKeyDeployment,
                awsSecretKeyDeployment,
                awsCertArn,
                deployId,
                deployType,
                terraformStateBucketName,
                terraformDeploymentBuildDir,
                getVpcId(terraformAccountBuildDir)
            )
        }
    }
}

task deployDevelop() {
    dependsOn 'copyAwsAccountFiles', 'copyDeploymentFiles'
    doLast {
        downloadS3Object(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            terraformStateBucketName,
            'account/terraform.tfstate',
            file("${terraformAccountBuildDir}/terraform.tfstate")
        )
        def deployType = 'develop'
        deployCore(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            awsCertArn,
            deployType,
            terraformStateBucketName,
            terraformDeploymentBuildDir,
            domain,
            getVpcId(terraformAccountBuildDir)
        )
    }
}