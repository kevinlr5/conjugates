buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

apply from: 'util.gradle'

apply plugin: 'org.flywaydb.flyway'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage;


import org.flywaydb.gradle.task.FlywayCleanTask;
import org.flywaydb.gradle.task.FlywayMigrateTask;
import org.flywaydb.gradle.FlywayExtension;

ext {
    terraformStateBucketName = System.getenv("TERRAFORM_STATE_BUCKET_NAME")
    awsAccessKeyRoot = System.getenv("AWS_ACCESS_KEY_ROOT")
    awsSecretKeyRoot = System.getenv("AWS_SECRET_KEY_ROOT")
    awsAccessKeyDeployment = System.getenv("AWS_ACCESS_KEY_DEPLOYMENT")
    awsSecretKeyDeployment = System.getenv("AWS_SECRET_KEY_DEPLOYMENT")
    awsCertArn = System.getenv("AWS_CERT_ARN")
    domain = System.getenv("DOMAIN")
    terraformAccountBuildDir = "${project.buildDir}/terraform/account"
    terraformDeploymentBuildDir = "${project.buildDir}/terraform/deployment"
    localMysqlContainerName = 'localmysql'
    localMysqlPassword = 'defaultpwd'
}

flyway {
    user = dbUsername
    url = "jdbc:mysql://${dbHostname}:3306"
    password = dbUserPassword
    locations = ["filesystem:${projectDir}/main_schema"]
    schemas = [schemaName]
}

def createFlywayExtensionLocal() {
    def extension = new org.flywaydb.gradle.FlywayExtension()
    extension.user = 'root'
    extension.url = "jdbc:mysql://localhost:3306"
    extension.password = localMysqlPassword
    extension.locations = ["filesystem:${projectDir}/main_schema"]
    extension.schemas = ['analyzer']
    return extension
}

def downloadAccountState() {
    downloadS3Object(
        awsAccessKeyDeployment,
        awsSecretKeyDeployment,
        terraformStateBucketName,
        'account/terraform.tfstate',
        file("${terraformAccountBuildDir}/terraform.tfstate")
    )
}

task clean(type: Delete) {
    delete 'build'
}

task flywayMigrateTest(type: org.flywaydb.gradle.task.FlywayMigrateTask)

task flywayCleanTest(type: org.flywaydb.gradle.task.FlywayCleanTask)

task copyAwsAccountFiles(type: Copy) {
    from("${projectDir}/aws_account_setup")
    into(terraformAccountBuildDir)
}

task copyDeploymentFiles(type: Copy) {
    from("${projectDir}/deployment")
    into(terraformDeploymentBuildDir)
}

task downloadAccountState() {
    doLast {
        downloadAccountState()
    }
}

task createAwsAccount() {
    dependsOn 'copyAwsAccountFiles'
    doLast {
        def s3Key = 'account/terraform.tfstate'
        if(doesS3ObjectExist(
            awsAccessKeyRoot,
            awsSecretKeyRoot,
            terraformStateBucketName,
            s3Key
        )) {
            downloadAccountState()
            createAccount(
                awsAccessKeyRoot,
                awsSecretKeyRoot,
                terraformStateBucketName,
                s3Key,
                terraformAccountBuildDir,
                dbUsername,
                dbUserPassword
            )
        } else { 
            def newBucketName = createTerraformStateBucketName()
            createAccount(
                awsAccessKeyRoot,
                awsSecretKeyRoot,
                newBucketName,
                s3Key,
                terraformAccountBuildDir,
                dbUsername,
                dbUserPassword
            )
        }
    }
}

task destroyAwsAccount() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles'
    doLast {
        def terraformAccountSetupEnvironment = [
            'TF_VAR_aws_access_key_root': awsAccessKeyRoot,
            'TF_VAR_aws_secret_key_root': awsSecretKeyRoot,
            'TF_VAR_terraform_bucket_name': terraformStateBucketName,
            'TF_VAR_db_user' : dbUsername,
            'TF_VAR_db_user_password' : dbUserPassword
        ]
        emptyS3Bucket(
            awsAccessKeyRoot,
            awsSecretKeyRoot,
            terraformStateBucketName
        )
        runTerraform(
            terraformAccountBuildDir,
            ['destroy', '-force'],
            terraformAccountSetupEnvironment
        )
    }
}

task flywayMigrateTestDeploy(type: org.flywaydb.gradle.task.FlywayMigrateTask)

task flywayCleanTestDeploy(type: org.flywaydb.gradle.task.FlywayCleanTask)

task deployTest() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles', 'copyDeploymentFiles', 'flywayMigrateTestDeploy'
    doLast {
        deploy(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            awsCertArn,
            deployId,
            deployType,
            terraformStateBucketName,
            terraformDeploymentBuildDir,
            terraformAccountBuildDir,
            dbHostname,
            dbUsername,
            dbUserPassword,
            schemaName
        )
    }
}

task destroyDeploy() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles', 'copyDeploymentFiles', 'flywayCleanTestDeploy'
    doLast {
        def deployType = 'not_used'
        destroyDeploy(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            awsCertArn,
            deployId,
            deployType,
            terraformStateBucketName,
            terraformDeploymentBuildDir,
            terraformAccountBuildDir,
            dbHostname,
            dbUsername,
            dbUserPassword,
            schemaName
        )
    }
}

task testDeploy() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles', 'copyDeploymentFiles', 'flywayMigrateTestDeploy'
    finalizedBy 'flywayCleanTestDeploy'
    doLast {
        try {
            deploy(
                awsAccessKeyDeployment,
                awsSecretKeyDeployment,
                awsCertArn,
                deployId,
                deployType,
                terraformStateBucketName,
                terraformDeploymentBuildDir,
                terraformAccountBuildDir,
                dbHostname,
                dbUsername,
                dbUserPassword,
                schemaName
            )
        } finally {
            destroyDeploy(
                awsAccessKeyDeployment,
                awsSecretKeyDeployment,
                awsCertArn,
                deployId,
                deployType,
                terraformStateBucketName,
                terraformDeploymentBuildDir,
                terraformAccountBuildDir,
                dbHostname,
                dbUsername,
                dbUserPassword,
                schemaName
            )
        }
    }
}

task flywayMigrateCore(type: org.flywaydb.gradle.task.FlywayMigrateTask)

task deployCore() {
    dependsOn 'downloadAccountState', 'copyAwsAccountFiles', 'copyDeploymentFiles', 'flywayMigrateCore'
    doLast {
        deployCore(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            awsCertArn,
            deployType,
            terraformStateBucketName,
            terraformDeploymentBuildDir,
            terraformAccountBuildDir,
            domain,
            dbHostname,
            dbUsername,
            dbUserPassword,
            schemaName
        )
    }
}

task flywayMigrateLocal(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    extension = createFlywayExtensionLocal()
}

task flywayCleanLocal(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    extension = createFlywayExtensionLocal()
}

task pullMysqlImage(type: DockerPullImage) {
    repository = 'mysql'
    tag = '5.7.16'
}

task buildMysqlContainer(type: DockerCreateContainer) {
    dependsOn pullMysqlImage
    targetImageId { 'mysql:5.7.16' }
    portBindings = ['3306:3306']
    env = ["MYSQL_ROOT_PASSWORD=${localMysqlPassword}"]
    containerName = localMysqlContainerName
}

task startMysqlContainer(type: DockerStartContainer) {
    dependsOn buildMysqlContainer
    targetContainerId { buildMysqlContainer.getContainerId() }
}

task startLocalDb() {
    dependsOn 'startMysqlContainer'
    finalizedBy 'flywayMigrateLocal'
    doLast {
        println 'wait for container to start'
        sleep(20000)
    }
}

task stopMysqlContainer(type: DockerStopContainer) {
    targetContainerId { localMysqlContainerName }
}

task destroyLocalDb(type: DockerRemoveContainer) {
    dependsOn stopMysqlContainer
    targetContainerId { localMysqlContainerName }
}