apply from: 'aws.gradle'

def generateRandomNumber() {
    def rnd = new Random();
    return 100000 + rnd.nextInt(900000);
}

def generateDeployId(project, deployType) {
    if(project.hasProperty('deployId')) {
        return deployId
    } else {
        return deployType + '-' + generateRandomNumber()
    }
}

def generateTerraformStateBucketName() {
    def name = System.getenv("TERRAFORM_STATE_BUCKET_NAME")
    return name ?: 'conjugates-terraform-state-' + generateRandomNumber()
}

ext {
    deployType = project.hasProperty('deployType') ? deployType : 'test'
    deployId = generateDeployId(project, deployType)
    terraformStateBucketName = generateTerraformStateBucketName()
    aws_access_key_root = System.getenv("AWS_ACCESS_KEY_ROOT")
    aws_secret_key_root = System.getenv("AWS_SECRET_KEY_ROOT")
    aws_access_key_deployment = System.getenv("AWS_ACCESS_KEY_DEPLOYMENT")
    aws_secret_key_deployment = System.getenv("AWS_SECRET_KEY_DEPLOYMENT")
    terraformDeploymentEnvironment = [
        'TF_VAR_aws_access_key_deployment': aws_access_key_deployment,
        'TF_VAR_aws_secret_key_deployment': aws_secret_key_deployment,
        'TF_VAR_version': project.version,
        'TF_VAR_deploy_id': deployId,
        'TF_VAR_deploy_type': deployType,
        'TF_VAR_docker_username': dockerUsername
    ]
    terraformAccountSetupEnvironment = [
        'TF_VAR_aws_access_key_root': aws_access_key_root,
        'TF_VAR_aws_secret_key_root': aws_secret_key_root,
        'TF_VAR_terraform_bucket_name': terraformStateBucketName
    ]
}

task createAwsAccountTerraform(type: Exec) {
    workingDir 'aws_account_setup'
    executable 'terraform'
    args 'plan'
    environment = terraformAccountSetupEnvironment
}

task destroyAwsAccountTerraform(type: Exec) {
    workingDir 'aws_account_setup'
    executable 'terraform'
    args = ['destroy', '-force']
    environment = terraformAccountSetupEnvironment
}

task plan(type: Exec) {
    workingDir 'deployment'
    executable 'terraform'
    args 'plan'
    environment = terraformDeploymentEnvironment
}

task deployTerraform(type: Exec) {
    workingDir 'deployment'
    executable 'terraform'
    args 'apply'
    environment = terraformDeploymentEnvironment
}

task destroyDeployTerraform(type: Exec) {
    workingDir 'deployment'
    executable 'terraform'
    args = ['destroy', '-force']
    environment = terraformDeploymentEnvironment
}

task pushAccountState() {
    doLast {
        putS3Object(
            aws_access_key_root,
            aws_secret_key_root,
            terraformStateBucketName,
            'account/state.tfstate',
            file("${projectDir}/aws_account_setup/terraform.tfstate")
        )
    }
}

task pushDeploymentState() {
    doLast {
        putS3Object(
            aws_access_key_deployment,
            aws_secret_key_deployment,
            terraformStateBucketName,
            "${deployId}/state.tfstate",
            file("${projectDir}/deployment/terraform.tfstate")
        )
    }
}

task downloadAccountState() {
    doLast {
        def keyName = 'account/state.tfstate'
        downloadS3Object(
            aws_access_key_root,
            aws_secret_key_root,
            terraformStateBucketName,
            keyName,
            file("${project.buildDir}/${terraformStateBucketName}/${keyName}")
        )
    }
}

task downloadDeploymentState() {
    doLast {
        downloadS3Object(
            aws_access_key_deployment,
            aws_secret_key_deployment,
            terraformStateBucketName,
            "${deployId}/state.tfstate",
            file("${projectDir}/deployment/terraform.tfstate")
        )
    }
}

task deleteS3Bucket() {
    doLast {
        deleteS3Bucket(
            aws_access_key_root,
            aws_secret_key_root,
            terraformStateBucketName
        )
    }
}

task deleteDeploymentState() {
    doLast {
        deleteS3Object(
            aws_access_key_deployment,
            aws_secret_key_deployment,
            terraformStateBucketName,
            "${deployId}/state.tfstate"
        )
    }
}

task createAwsAccount() {
    dependsOn 'createAwsAccountTerraform', 'pushAccountState'
    tasks.pushAccountState.mustRunAfter 'createAwsAccountTerraform'
}

task destroyAwsAccount() {
    dependsOn 'downloadAccountState', 'destroyAwsAccountTerraform', 'deleteS3Bucket'
    tasks.destroyAwsAccountTerraform.mustRunAfter 'downloadAccountState'
    tasks.deleteS3Bucket.mustRunAfter 'destroyAwsAccountTerraform'
}

task deploy() {
    dependsOn 'deployTerraform', 'pushDeploymentState'
    tasks.pushDeploymentState.mustRunAfter 'deployTerraform'
}

task destroyDeploy() {
    dependsOn 'downloadDeploymentState', 'destroyDeployTerraform', 'deleteDeploymentState'
    tasks.destroyDeployTerraform.mustRunAfter 'downloadDeploymentState'
    tasks.deleteDeploymentState.mustRunAfter 'destroyDeployTerraform'
}