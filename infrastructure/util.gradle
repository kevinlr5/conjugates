buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("com.amazonaws:aws-java-sdk:${awsVersion}")
        classpath("commons-io:commons-io:${commonsIoVersion}")
    }
}

import groovy.json.JsonSlurper

import java.io.File;
import java.io.InputStream;
import java.io.IOException;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.route53.AmazonRoute53Client;
import com.amazonaws.services.route53.model.AliasTarget;
import com.amazonaws.services.route53.model.Change;
import com.amazonaws.services.route53.model.ChangeAction;
import com.amazonaws.services.route53.model.ChangeBatch;
import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;
import com.amazonaws.services.route53.model.RRType;
import com.amazonaws.services.route53.model.ResourceRecord;
import com.amazonaws.services.route53.model.ResourceRecordSet;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.S3ObjectSummary
import com.amazonaws.services.s3.model.S3Object;


import org.apache.commons.io.FileUtils;

def createS3Client(key, secretKey) {
    def creds = new BasicAWSCredentials(key, secretKey)
    return new AmazonS3Client(creds)
}

def createRoute53Client(key, secretKey) {
    def creds = new BasicAWSCredentials(key, secretKey);
    return new AmazonRoute53Client(creds);
}

def createRandomNumber() {
    def rnd = new Random()
    return 100000 + rnd.nextInt(900000)
}

def validateDeploymentUp(terraformBuildDir) {
    // Retry for 10 minutes
    retry(120, 5000) {
        def frontendUp = validateFrontendUp(terraformBuildDir)
        def analyzerUp = validateAnalyzerUp(terraformBuildDir)
        if(frontendUp && analyzerUp) {
            println "Deployment up!"
        } else {
            if(!frontendUp) {
                println "Waiting for frontend to come up"
            }
            if(!analyzerUp) {
                println "Waiting for analyzer to come up"
            }
            throw new RuntimeException("Deployment not up")
        }
    }
}

def validateAnalyzerUp(terraformBuildDir) {
    def analyzerIp = getAnalyzerDns(terraformBuildDir)
    def infoEndpoint = 'https://' + analyzerIp + ':8443/api/info/'
    def p = ['curl', '-k', infoEndpoint].execute()
    def text = p.text
    if(text.empty) {
        return false
    } else {
        def json = new JsonSlurper().parseText(text)
        def version = json['version']
        return version == project.version
    }
}

def validateFrontendUp(terraformBuildDir) {
    def frontendIp = getFrontendDns(terraformBuildDir)
    def home = 'https://' + frontendIp + ':443/'
    def p = ['curl', '-k', home].execute()
    def text = p.text
    return !text.empty && text.contains('Sentiment')
}

def deleteS3Object(key, secretKey, bucketName, keyName) {
    def s3client = createS3Client(key, secretKey)
    s3client.deleteObject(bucketName, keyName)
}

def getTfOutputVariable(terraformBuildDir, variable) {
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir terraformBuildDir
        commandLine 'terraform', 'output', variable
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getAnalyzerDns(terraformBuildDir) {
    return getTfOutputVariable(terraformBuildDir, 'analyzer_dns_name')
}

def getFrontendDns(terraformBuildDir) {
    return getTfOutputVariable(terraformBuildDir, 'frontend_dns_name')
}

def getAnalyzerHostedZone(terraformBuildDir) {
    return getTfOutputVariable(terraformBuildDir, 'analyzer_hosted_zone')
}

def getFrontendHostedZone(terraformBuildDir) {
    return getTfOutputVariable(terraformBuildDir, 'frontend_hosted_zone')
}

def getVpcId(terraformAccountBuildDir) {
    return getTfOutputVariable(terraformAccountBuildDir, 'vpc_id')
}

def getS3ObjectContents(key, secretKey, bucketName, keyName) {
    def s3client = createS3Client(key, secretKey)
    if(s3client.doesObjectExist(bucketName, keyName)) {
        return s3client.getObjectAsString(bucketName, keyName);
    } else {
        return null;
    }
}

def promoteDns(key, secretKey, terraformBuildDir, domain) {
    def client = createRoute53Client(key, secretKey);
    def hostedZoneId = client.listHostedZones().getHostedZones().first().getId()
    def frontendElbDns = getFrontendDns(terraformBuildDir)
    def analyzerElbDns = getAnalyzerDns(terraformBuildDir)
    def frontendHostedZone = getFrontendHostedZone(terraformBuildDir)
    def analyzerHostedZone = getAnalyzerHostedZone(terraformBuildDir)
    client.changeResourceRecordSets(new ChangeResourceRecordSetsRequest()
        .withHostedZoneId(hostedZoneId)
        .withChangeBatch(new ChangeBatch()
            .withChanges(
                new Change(
                    ChangeAction.UPSERT,
                    new ResourceRecordSet(domain, RRType.A)
                        .withAliasTarget(new AliasTarget()
                            .withHostedZoneId(frontendHostedZone)
                            .withDNSName(frontendElbDns)
                            .withEvaluateTargetHealth(false))),
                new Change(
                    ChangeAction.UPSERT,
                    new ResourceRecordSet("api.${domain}", RRType.A)
                        .withAliasTarget(new AliasTarget()
                            .withHostedZoneId(analyzerHostedZone)
                            .withDNSName(analyzerElbDns)
                            .withEvaluateTargetHealth(false))),
                new Change(
                    ChangeAction.UPSERT,
                    new ResourceRecordSet("www.${domain}", RRType.CNAME)
                        .withResourceRecords(new ResourceRecord(domain))
                        .withTTL(60L)))))
    println "Promoted to ${domain}. Waiting to for DNS TTL"
    def aliasTtlWait = 70000 // 60 second TTL + 10 extra seconds
    sleep(aliasTtlWait)
}

def promoteCore(
    key,
    secretKey,
    certArn,
    terraformStateBucketName,
    terraformBuildDir,
    terraformAccountBuildDir,
    deployType,
    newDeployId,
    oldDeployId,
    domain) {
    promoteDns(key, secretKey, terraformBuildDir, domain)
    putS3Object(
        key,
        secretKey,
        terraformStateBucketName,
        "${deployType}/deployid.txt",
        newDeployId
    )
    if(oldDeployId != null) {
        destroyDeploy(
            key,
            secretKey,
            certArn,
            oldDeployId,
            deployType,
            terraformStateBucketName,
            terraformBuildDir,
            terraformAccountBuildDir
        )
    }
}

ext.createTerraformStateBucketName = {
    return 'sentiment-terraform-state-' + createRandomNumber()
}

ext.createDeployId = { deployType ->
    return deployType + '-' + createRandomNumber()
}

ext.putS3Object = { key, secretKey, bucketName, keyName, content ->
    def s3client = createS3Client(key, secretKey)
    s3client.putObject(bucketName, keyName, content)
}

ext.doesS3ObjectExist = { key, secretKey, bucketName, keyName ->
    def s3client = createS3Client(key, secretKey)
    return s3client.doesObjectExist(bucketName, keyName)
}

ext.downloadS3Object = { key, secretKey, bucketName, keyName, outputFile ->
    def s3client = createS3Client(key, secretKey)
    def content = s3client.getObjectAsString(bucketName, keyName);
    FileUtils.writeStringToFile(outputFile, content)
}

ext.emptyS3Bucket = { key, secretKey, bucketName ->
    def s3client = createS3Client(key, secretKey)
    def objectListing = s3client.listObjects(bucketName);
    while (true) {
        for (Iterator<?> iterator =
                objectListing.getObjectSummaries().iterator();
                iterator.hasNext();) {
            def summary = (S3ObjectSummary)iterator.next()
            s3client.deleteObject(bucketName, summary.getKey())
        }
        if (objectListing.isTruncated()) {
            objectListing = s3client.listNextBatchOfObjects(objectListing);
        } else {
            break;
        }
    };
}

ext.runTerraform = { terraformWorkingDir, terraformArgs, terraformEnvironment ->
    exec {
        workingDir terraformWorkingDir
        executable 'terraform'
        args = terraformArgs
        environment = terraformEnvironment
    }
}

ext.createAccount = {
    awsAccessKeyRoot,
    awsSecretKeyRoot,
    bucketName,
    s3Key,
    terraformAccountBuildDir,
    dbUsername,
    dbUserPassword ->
    def terraformAccountSetupEnvironment = [
        'TF_VAR_aws_access_key_root': awsAccessKeyRoot,
        'TF_VAR_aws_secret_key_root': awsSecretKeyRoot,
        'TF_VAR_terraform_bucket_name': bucketName,
        'TF_VAR_db_user' : dbUsername,
        'TF_VAR_db_user_password' : dbUserPassword
    ]
    runTerraform(
        terraformAccountBuildDir,
        ['apply'],
        terraformAccountSetupEnvironment
    )
    putS3Object(
        awsAccessKeyRoot,
        awsSecretKeyRoot,
        bucketName,
        s3Key,
        file("${terraformAccountBuildDir}/terraform.tfstate")
    )
}

ext.deploy = {
    awsAccessKeyDeployment,
    awsSecretKeyDeployment,
    awsCertArn,
    deployId,
    deployType,
    terraformStateBucketName,
    terraformBuildDir,
    terraformAccountBuildDir,
    domain = 'none' ->
    def terraformDeploymentEnvironment = [
        'TF_VAR_aws_access_key_deployment': awsAccessKeyDeployment,
        'TF_VAR_aws_secret_key_deployment': awsSecretKeyDeployment,
        'TF_VAR_aws_cert_arn': awsCertArn,
        'TF_VAR_version': project.version,
        'TF_VAR_deploy_id': deployId,
        'TF_VAR_deploy_type': deployType,
        'TF_VAR_docker_username': dockerUsername,
        'TF_VAR_api_address' : "api.${domain}",
        'TF_VAR_vpc_id' : getVpcId(terraformAccountBuildDir)
    ]
    try {
        runTerraform(
            terraformBuildDir,
            ['apply'],
            terraformDeploymentEnvironment
        )
    } finally {
        putS3Object(
            awsAccessKeyDeployment,
            awsSecretKeyDeployment,
            terraformStateBucketName,
            "${deployId}/terraform.tfstate",
            file("${terraformBuildDir}/terraform.tfstate")
        )
    }
    validateDeploymentUp(terraformBuildDir)
}

ext.destroyDeploy = {
    awsAccessKeyDeployment,
    awsSecretKeyDeployment,
    awsCertArn,
    deployId,
    deployType,
    terraformStateBucketName,
    terraformBuildDir,
    terraformAccountBuildDir ->
    def terraformDeploymentEnvironment = [
        'TF_VAR_aws_access_key_deployment': awsAccessKeyDeployment,
        'TF_VAR_aws_secret_key_deployment': awsSecretKeyDeployment,
        'TF_VAR_aws_cert_arn': awsCertArn,
        'TF_VAR_version': project.version,
        'TF_VAR_deploy_id': deployId,
        'TF_VAR_deploy_type': deployType,
        'TF_VAR_docker_username': dockerUsername,
        'TF_VAR_vpc_id' : getVpcId(terraformAccountBuildDir)
    ]
    downloadS3Object(
        awsAccessKeyDeployment,
        awsSecretKeyDeployment,
        terraformStateBucketName,
        "${deployId}/terraform.tfstate",
        file("${terraformBuildDir}/terraform.tfstate")
    )
    runTerraform(
        terraformBuildDir,
        ['destroy', '-force'],
        terraformDeploymentEnvironment
    )
    deleteS3Object(
        awsAccessKeyDeployment,
        awsSecretKeyDeployment,
        terraformStateBucketName,
        "${deployId}/terraform.tfstate"
    )
}

ext.deployCore = {
    awsAccessKeyDeployment,
    awsSecretKeyDeployment,
    awsCertArn,
    deployType,
    terraformStateBucketName,
    terraformBuildDir,
    terraformAccountBuildDir,
    domain ->
    def newDeployId = createDeployId(deployType)
    deploy(
        awsAccessKeyDeployment,
        awsSecretKeyDeployment,
        awsCertArn,
        newDeployId,
        deployType,
        terraformStateBucketName,
        terraformBuildDir,
        terraformAccountBuildDir,
        domain
    )
    def oldDeployId = getS3ObjectContents(
        awsAccessKeyDeployment,
        awsSecretKeyDeployment,
        terraformStateBucketName,
        "${deployType}/deployid.txt"
    )
    promoteCore(
        awsAccessKeyDeployment,
        awsSecretKeyDeployment,
        awsCertArn,
        terraformStateBucketName,
        terraformBuildDir,
        terraformAccountBuildDir,
        deployType,
        newDeployId,
        oldDeployId,
        domain)
}
