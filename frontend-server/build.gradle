import com.bmuschko.gradle.docker.DockerRegistryCredentials
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerInspectContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer

ext {
    port = 8080
    containerName = 'frontend'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
}

task copyStaticContent(type: Copy, dependsOn: ':frontend-static:buildFrontend') {
    from(project(":frontend-static").buildDir)
    into("${project.buildDir}/resources/main/static")
}

tasks.processResources.dependsOn copyStaticContent

task prepareImageBuildDir(type: Copy) {
    from("${project.rootDir}/infrastructure/${containerName}")
    from("${project.buildDir}/libs") {
        include '*.jar'
        rename '.*jar', 'app.jar'
    }
    into(imageBuildDir)
}

task buildImage(type: DockerBuildImage) {
    dependsOn assemble, prepareImageBuildDir
    inputDir = imageBuildDir
    tag "${dockerUsername}/${containerName}:${project.version}"
}

task removeImage(type: DockerRemoveImage) {
    targetImageId { buildImage.getImageId() }
}

task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    imageName "${dockerUsername}/${containerName}"
    tag project.version
    registryCredentials = new DockerRegistryCredentials()
    registryCredentials.username = dockerUsername
    registryCredentials.password = System.getenv("DOCKER_PASSWORD")
}

task createContainer(type: DockerCreateContainer) {
    dependsOn pushImage
    targetImageId { buildImage.getImageId() }
    portBindings = ["${port}:${port}"]
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId { createContainer.getContainerId() }
}

task removeContainer(type: DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId { createContainer.getContainerId() }
}

task testContainer() {
    dependsOn startContainer
    doLast {
        validateHttpEndpoint("http://localhost:${port}", containerName) { response ->
            return response.contains('Sentiment')
        }
    }
    finalizedBy removeContainer, removeImage
}

tasks.check.dependsOn testContainer
// CIRCLE CI cannot remove docker images/containers
[tasks.removeContainer, tasks.removeImage].each { t -> t.enabled = !System.getenv("CIRCLECI") }

