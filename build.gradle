buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorPluginVersion}")
        classpath("com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}")
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

apply from: 'git.gradle'

project.version = gitDescribe()
ext {
    gitCommit = gitCommitHash()
}

subprojects {
    group = 'org.conjugates'
    version = rootProject.version
    ext {
        gitCommit = rootProject.ext.gitCommit
    }
}

project(":analyzer") {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'checkstyle'
    apply plugin: 'org.asciidoctor.convert'
    apply plugin: 'com.bmuschko.docker-remote-api'

    checkstyle {
       toolVersion = checkstyleToolVersion
       configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    }
    
    ext {
        snippetsDir = file('build/generated-snippets')
        imageBuildDir = file("${project.buildDir}/image")
    }
    
    sourceCompatibility = 1.8
    
    repositories {
        mavenCentral()
    }
    
    dependencies {
        compile('org.springframework.boot:spring-boot-starter-aop')
        // compile('org.springframework.boot:spring-boot-starter-security')
        compile('org.springframework.boot:spring-boot-starter-web')

        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    }

    task prepareImageBuildDir(type: Copy) {
        from("${project.rootDir}/containers/analyzer") {
            filesMatching("application.properties") { props ->
                props.expand(version: project.version, commit: project.gitCommit)
            }
        }
        from("${project.buildDir}/libs") {
            include '*.jar'
            rename '.*jar', 'app.jar'
        }
        into(imageBuildDir)
    }
    
    task buildImage(type: DockerBuildImage) {
        dependsOn assemble, prepareImageBuildDir
        inputDir = file(imageBuildDir)
        tag "conjugates/analyzer:${project.version}"
    } 

    task removeImage(type: DockerRemoveImage) {
        dependsOn buildImage
        targetImageId { buildImage.imageId }
    }

    task dockerBuild() {
        dependsOn removeImage
    }

    test {
        outputs.dir snippetsDir
    }
    
    asciidoctor {
        attributes 'snippets': snippetsDir
        inputs.dir snippetsDir
        dependsOn test
    }

    tasks.check.dependsOn dockerBuild, asciidoctor
    // CIRCLE CI cannot remove docker images/containers
    tasks.removeImage.enabled = !System.getenv("CIRCLECI")

}
